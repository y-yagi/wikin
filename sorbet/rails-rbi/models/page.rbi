# This is an autogenerated file for dynamic methods in Page
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Page::ActiveRecord_Relation < ActiveRecord::Relation
  include Page::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Page)
end

class Page::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  include Page::ModelRelationShared
  extend T::Generic
  Elem = type_member(fixed: Page)
end

class Page < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Page::ModelRelationShared
  include Page::InstanceMethods
  Elem = type_template(fixed: Page)
end

module Page::InstanceMethods
  extend T::Sig

  sig { returns(T.nilable(String)) }
  def body(); end

  sig { params(value: T.nilable(String)).void }
  def body=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def body?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def created_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def created_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def created_at?(*args); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def id?(*args); end

  sig { returns(T.nilable(Integer)) }
  def parent_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def parent_id=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def parent_id?(*args); end

  sig { returns(T.nilable(T::Array[T.untyped])) }
  def tags(); end

  sig { params(value: T.nilable(T::Array[T.untyped])).void }
  def tags=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def tags?(*args); end

  sig { returns(T.nilable(String)) }
  def title(); end

  sig { params(value: T.nilable(String)).void }
  def title=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def title?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def updated_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def updated_at=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def updated_at?(*args); end

end

class Page
  extend T::Sig

  sig { returns(::Page::ActiveRecord_Associations_CollectionProxy) }
  def children(); end

  sig { params(value: T.any(T::Array[::Page], ::Page::ActiveRecord_Associations_CollectionProxy)).void }
  def children=(value); end

  sig { returns(T.nilable(::OldPage)) }
  def old_page(); end

  sig { params(value: T.nilable(::OldPage)).void }
  def old_page=(value); end

  sig { returns(T.nilable(::Page)) }
  def parent(); end

  sig { params(value: T.nilable(::Page)).void }
  def parent=(value); end

end

module Page::ModelRelationShared
  extend T::Sig

  sig { returns(Page::ActiveRecord_Relation) }
  def all(); end

  sig { params(block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def unscoped(&block); end

  sig { params(args: T.untyped).returns(Page::ActiveRecord_Relation) }
  def root(*args); end

  sig { params(args: T.untyped).returns(Page::ActiveRecord_Relation) }
  def tag(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def select(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def reselect(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def order(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def reorder(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def group(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def limit(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def offset(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def left_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def left_outer_joins(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def where(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def rewhere(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def preload(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def extract_associated(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def eager_load(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def includes(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def from(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def lock(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def readonly(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def extending(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def or(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def having(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def create_with(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def distinct(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def references(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def none(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def unscope(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def optimizer_hints(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def merge(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def except(*args, &block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Page::ActiveRecord_Relation) }
  def only(*args, &block); end

end
