# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/skylight/all/skylight.rbi
#
# skylight-4.1.2
module Skylight
  def self.check_install_errors(config); end
  def self.config_class; end
  def self.instrumenter_class; end
  def self.lex_sql(arg0); end
  def self.libskylight_path; end
  def self.load_libskylight(arg0); end
  def self.native?; end
  def self.warn_skylight_native_missing(config); end
  extend Skylight::Core::Instrumentable::ClassMethods
  extend Skylight::Core::Util::Logging
  include Skylight::Core::Instrumentable
end
class Skylight::Trace < Skylight::Core::Trace
  def initialize(*arg0); end
  def maybe_broken(error); end
  def native_get_endpoint; end
  def native_get_started_at; end
  def native_get_uuid; end
  def native_set_endpoint(arg0); end
  def native_set_exception(arg0); end
  def native_span_get_category(arg0); end
  def native_span_get_correlation_header(arg0); end
  def native_span_get_title(arg0); end
  def native_span_set_description(arg0, arg1); end
  def native_span_set_exception(arg0, arg1, arg2); end
  def native_span_set_meta(arg0, arg1); end
  def native_span_set_title(arg0, arg1); end
  def native_span_started(arg0); end
  def native_start_span(arg0, arg1); end
  def native_stop_span(arg0, arg1); end
  def native_use_pruning; end
  def self.native_new(arg0, arg1, arg2, arg3); end
  def too_many_spans!; end
  def too_many_spans?; end
  def traced; end
  def track_gc(*arg0); end
  def use_pruning?; end
  def uuid; end
  def uuid=(value); end
end
class Skylight::Instrumenter < Skylight::Core::Instrumenter
  def check_install!; end
  def native_start; end
  def native_stop; end
  def native_submit_trace(arg0); end
  def native_track_desc(arg0, arg1); end
  def process_sql(sql); end
  def self.native_new(arg0, arg1); end
  def self.trace_class; end
end
class Skylight::Middleware < Skylight::Core::Middleware
end
module Skylight::Util
end
class Skylight::Util::SSL
  def self.ca_cert_dir; end
  def self.ca_cert_dir?; end
  def self.ca_cert_file?; end
  def self.ca_cert_file_or_default; end
  def self.detect_ca_cert_dir!; end
  def self.detect_ca_cert_file!; end
end
class Skylight::Util::HTTP
  def authentication; end
  def authentication=(arg0); end
  def build_request(type, endpoint, hdrs, length = nil); end
  def config; end
  def do_request(http, req); end
  def execute(req, body = nil); end
  def get(endpoint, hdrs = nil); end
  def get_timeout(type, config, service, opts); end
  def host; end
  def initialize(config, service = nil, opts = nil); end
  def port; end
  def post(endpoint, body, hdrs = nil); end
  include Skylight::Core::Util::Logging
end
class Skylight::Util::HTTP::StartError < StandardError
  def initialize(error); end
  def original; end
end
class Skylight::Util::HTTP::ReadResponseError < StandardError
end
class Skylight::Util::HTTP::Response
  def body; end
  def exception; end
  def get(key); end
  def headers; end
  def initialize(status, headers, body); end
  def method_missing(name, *args, &blk); end
  def respond_to_missing?(name, include_all = nil); end
  def status; end
  def success?; end
  def to_s; end
end
class Skylight::Util::HTTP::ErrorResponse < Struct
  def exception; end
  def exception=(_); end
  def request; end
  def request=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def status; end
  def success?; end
end
class Skylight::Api
  def config; end
  def create_app(name, token = nil); end
  def error_for_status(code); end
  def fetch_mergeable_apps(token); end
  def http_request(service, method, *args); end
  def initialize(config); end
  def merge_apps!(token, app_guid:, component_guid:, environment:); end
  def validate_config; end
  include Skylight::Core::Util::Logging
end
class Skylight::Api::Error < StandardError
end
class Skylight::Api::Unauthorized < Skylight::Api::Error
end
class Skylight::Api::Conflict < Skylight::Api::Error
end
class Skylight::Api::CreateFailed < Skylight::Api::Error
  def errors; end
  def initialize(res); end
  def res; end
  def to_s; end
end
class Skylight::Api::ConfigValidationResults
  def body; end
  def config_valid?; end
  def corrected_config; end
  def error_response?; end
  def forbidden?; end
  def initialize(config, raw_response); end
  def raw_response; end
  def status; end
  def token_valid?; end
  def validation_errors; end
  include Skylight::Core::Util::Logging
end
module Skylight::Helpers
  def self.included(base); end
end
module Skylight::Helpers::ClassMethods
  def __sk_instrument_method_on(klass, name, title, opts); end
  def __sk_singleton_class; end
  def instrument_class_method(name, opts = nil); end
  def instrument_method(*args); end
  def method_added(name); end
  def singleton_method_added(name); end
end
class Skylight::Util::Component
  def argv; end
  def as_json(*arg0); end
  def environment; end
  def environment=(arg0); end
  def initialize(environment, name); end
  def known_web_context?; end
  def known_worker_context?; end
  def name; end
  def name=(arg0); end
  def passenger?; end
  def program_name; end
  def rack_server?; end
  def rails_server?; end
  def resolve_name(given_name); end
  def to_s; end
  def unicorn?; end
  def validate_string!(string, kind); end
  def web?; end
  def worker?; end
end
module Skylight::Util::Deploy
  def self.build(config); end
end
class Skylight::Util::Deploy::EmptyDeploy
  def config; end
  def description; end
  def git_sha; end
  def id; end
  def initialize(config); end
  def timestamp; end
  def to_query_hash; end
end
class Skylight::Util::Deploy::DefaultDeploy < Skylight::Util::Deploy::EmptyDeploy
  def description; end
  def git_sha; end
  def id; end
  def initialize(*arg0); end
  include Skylight::Core::Util::Logging
end
class Skylight::Util::Deploy::HerokuDeploy < Skylight::Util::Deploy::EmptyDeploy
  def description; end
  def get_info; end
  def git_sha; end
  def id; end
  def initialize(*arg0); end
end
class Skylight::Util::Deploy::GitDeploy < Skylight::Util::Deploy::EmptyDeploy
  def description; end
  def get_info; end
  def git_sha; end
  def initialize(*arg0); end
end
module Skylight::Util::Platform
  def self.dlext; end
  def self.libext; end
  def self.tuple; end
end
module Skylight::Util::Hostname
  def self.default_hostname; end
end
class Skylight::Config < Skylight::Core::Config
  def api; end
  def as_json(*arg0); end
  def authentication_with_meta; end
  def check_nfs(path); end
  def check_sockdir_permissions(sockdir_path); end
  def component; end
  def deploy; end
  def reporting_env?; end
  def self.default_values; end
  def self.env_to_key; end
  def self.legacy_keys; end
  def self.native_env_keys; end
  def self.required_keys; end
  def self.validators; end
  def to_native_env; end
  def validate!; end
  def validate_with_server; end
  def web_context?; end
  def worker_context?; end
  def write(path); end
end
class Skylight::NativeError < StandardError
  def code; end
  def formatted_code; end
  def initialize(method_name); end
  def method_name; end
  def self.code; end
  def self.for_code(code); end
  def self.message; end
  def self.register(code, name, message); end
end
class Skylight::MaximumTraceSpansError < Skylight::NativeError
  def self.code; end
  def self.message; end
end
class Skylight::SqlLexError < Skylight::NativeError
  def self.code; end
  def self.message; end
end
class Skylight::Core::Util::Clock
  def native_hrtime; end
end
class Skylight::Railtie < Rails::Railtie
  def activate?(sk_config); end
  def activate_for_web?(sk_config); end
  def activate_for_worker?(sk_config); end
  def development_warning; end
  def load_skylight_config(app); end
  def self.config_class; end
  def self.gem_name; end
  def self.log_file_name; end
  def self.middleware_class; end
  def self.namespace; end
  def self.root_key; end
  def self.version; end
  include Skylight::Core::Railtie
end
